import React, { useState } from 'react';
import axios from 'axios';

const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || '';

const SubtitleTransformForm: React.FC = () => {
  const [file, setFile] = useState<File | null>(null);
  const [operation, setOperation] = useState<'translate' | 'tokenize'>('translate');
  const [sourceLang, setSourceLang] = useState('ja');
  const [targetLang, setTargetLang] = useState('ru');
  const [downloadUrl, setDownloadUrl] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [status, setStatus] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setDownloadUrl(null);
    setError(null);
    setStatus(null);

    if (!file) {
      setError('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª');
      return;
    }

    const formData = new FormData();
    formData.append('file', file);
    formData.append('operation', operation);
    formData.append('sourceLang', sourceLang);
    formData.append('targetLang', targetLang);

    setIsLoading(true);
    setStatus('–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...');

    try {
      const response = await axios.post<Blob>(`${API_BASE_URL}/api/subtitles/transform`, formData, {
        responseType: 'blob',
      });

      const blob = new Blob([response.data], { type: 'text/vtt' });
      const url = URL.createObjectURL(blob);
      setDownloadUrl(url);
      setStatus('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (err: any) {
      console.error(err);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞');
      setStatus('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <label>–§–∞–π–ª —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (.vtt)</label>
      <input type="file" accept=".vtt" onChange={(e) => setFile(e.target.files?.[0] || null)} />

      <label>–û–ø–µ—Ä–∞—Ü–∏—è</label>
      <select value={operation} onChange={(e) => setOperation(e.target.value as any)} className="w-full border p-2 rounded">
        <option value="translate">–ü–µ—Ä–µ–≤–æ–¥</option>
        <option value="tokenize">–†–∞–∑–±–∏–≤–∫–∞</option>
      </select>

      {operation === 'translate' && (
        <>
          <label>–Ø–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞</label>
          <select value={sourceLang} onChange={(e) => setSourceLang(e.target.value)} className="w-full border p-2 rounded">
            <option value="ja">–Ø–ø–æ–Ω—Å–∫–∏–π</option>
            <option value="ru">–†—É—Å—Å–∫–∏–π</option>
          </select>

          <label>–Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞</label>
          <select value={targetLang} onChange={(e) => setTargetLang(e.target.value)} className="w-full border p-2 rounded">
            <option value="ru">–†—É—Å—Å–∫–∏–π</option>
            <option value="ja">–Ø–ø–æ–Ω—Å–∫–∏–π</option>
            <option value="en">–ê–Ω–≥–ª–∏–π—Å–∫–∏–π</option>
          </select>
        </>
      )}

      <button type="submit" className="bg-blue-600 text-white px-4 py-2 rounded" disabled={isLoading}>
        {isLoading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å'}
      </button>

      {isLoading && <p className="text-gray-600">‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</p>}

      {status && <p className="text-sm text-gray-700">{status}</p>}

      {error && <p className="text-red-600 font-semibold">{error}</p>}

      {downloadUrl && (
        <div>
          <a
            href={downloadUrl}
            download={`subtitles_${operation}.vtt`}
            className="text-blue-500 underline"
          >
            üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          </a>
        </div>
      )}
    </form>
  );
};

export default SubtitleTransformForm;
